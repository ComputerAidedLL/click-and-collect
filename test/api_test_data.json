{
  "call_api_parse_sequent": [
    {
      "sequent_as_string": "a",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"litteral","value":"a"}]}
    },
    {
      "sequent_as_string": "a'",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"litteral","value":"a'"}]}
    },
    {
      "sequent_as_string": "Δ′",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"litteral","value":"Δ′"}]}
    },
    {
      "sequent_as_string": "a1",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"litteral","value":"a1"}]}
    },
    {
      "sequent_as_string": "hEll0",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"litteral","value":"hEll0"}]}
    },
    {
      "sequent_as_string": "A,Γ",
      "expected_sequent_as_json": {"hyp":[],"cons":[
        {"type":"litteral","value":"A"},
        {"type":"litteral","value":"Γ"}
      ]}
    },
    {
      "sequent_as_string": "top",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"neutral","value":"top"}]}
    },
    {
      "sequent_as_string": "",
      "expected_sequent_as_json": {"hyp":[],"cons":[]}
    },
    {
      "sequent_as_string": "|-",
      "expected_sequent_as_json": {"hyp":[],"cons":[]}
    },
    {
      "sequent_as_string": "a,b,c",
      "expected_sequent_as_json": {"hyp":[],"cons":[
        {"type":"litteral","value":"a"},
        {"type":"litteral","value":"b"},
        {"type":"litteral","value":"c"}
      ]}
    },
    {
      "sequent_as_string": "S,T,U",
      "expected_sequent_as_json": {"hyp":[],"cons":[
        {"type":"litteral","value":"S"},
        {"type":"neutral","value":"top"},
        {"type":"litteral","value":"U"}
      ]}
    },
    {
      "sequent_as_string": "a|-b,c",
      "expected_sequent_as_json": {"hyp":[],"cons":[
        {"type":"litteral","value":"b"},
        {"type":"litteral","value":"c"},
        {"type":"orthogonal","value":{"type":"litteral","value":"a"}}
      ]}
    },
    {
      "sequent_as_string": "a,!a",
      "expected_sequent_as_json": {"hyp":[],"cons":[
        {"type":"litteral","value":"a"},
        {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
      ]}
    },
    {
      "sequent_as_string": "a^|-",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"litteral","value":"a"}]}
    },
    {
      "sequent_as_string": "a^^|-",
      "expected_sequent_as_json": {"hyp":[],"cons":[{"type":"orthogonal","value":{"type":"litteral","value":"a"}}]}
    },
    {
      "sequent_as_string": "1-ob",
      "expected_sequent_as_json": {"hyp":[],"cons":[
        {
          "type": "par",
          "value1": {"type":"neutral","value":"bottom"},
          "value2": {"type":"litteral","value":"b"}
        }
      ]}
    },
    {
      "sequent_as_string": "?A^",
      "expected_sequent_as_json": {"hyp":[],"cons":[
        {"type":"whynot","value":{"type":"orthogonal","value":{"type":"litteral","value":"A"}}}
      ]}
    }
  ],
  "call_api_apply_rule": [
    {
      "request": {
        "rule":"one",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"one"}
          ]
        },
        "formulaPositions":[0]
      },
      "expected_sequent_list_as_json": []
    },
    {
      "request": {
        "rule":"bottom",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"one"},
            {"type":"neutral","value":"bottom"},
            {"type":"litteral","value":"a"}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": [{"hyp": [], "cons": [
        {"type":"neutral","value":"one"},
        {"type":"litteral","value":"a"}
      ]
      }]
    },
    {
      "request": {
        "rule":"top",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"one"},
            {"type":"neutral","value":"bottom"},
            {"type":"neutral","value":"top"}
          ]
        },
        "formulaPositions":[2]
      },
      "expected_sequent_list_as_json": []
    },
    {
      "request": {
        "rule":"axiom",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"litteral","value":"a"},
            {"type":"orthogonal","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": []
    },
    {
      "request": {
        "rule":"axiom",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"one"},
            {"type":"neutral","value":"bottom"}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": []
    },
    {
      "request": {
        "rule":"tensor",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"litteral","value":"a"},
            {"type": "tensor",
              "value1":{"type": "neutral", "value":"top"},
              "value2":{"type": "neutral", "value":"one"}
            },
            {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": [{
        "hyp":[],
        "cons":[
          {"type":"litteral","value":"a"},
          {"type": "neutral", "value":"top"}
        ]}, {
        "hyp":[],
        "cons":[
          {"type": "neutral", "value":"one"},
          {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
        ]
      }]
    },
    {
      "request": {
        "rule":"par",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"litteral","value":"a"},
            {"type": "par",
              "value1":{"type": "neutral", "value":"top"},
              "value2":{"type": "neutral", "value":"one"}
            },
            {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": [{
        "hyp":[],
        "cons":[
          {"type":"litteral","value":"a"},
          {"type": "neutral", "value":"top"},
          {"type": "neutral", "value":"one"},
          {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
        ]
      }]
    },
    {
      "request": {
        "rule":"with",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"litteral","value":"a"},
            {"type": "with",
              "value1":{"type": "neutral", "value":"top"},
              "value2":{"type": "neutral", "value":"one"}
            },
            {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[
        {"type":"litteral","value":"a"},
        {"type": "neutral", "value":"top"},
        {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
      ]},{"hyp":[], "cons":[
        {"type":"litteral","value":"a"},
        {"type": "neutral", "value":"one"},
        {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
      ]}]
    },
    {
      "request": {
        "rule":"plus_left",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"litteral","value":"a"},
            {"type": "plus",
              "value1":{"type": "neutral", "value":"top"},
              "value2":{"type": "neutral", "value":"one"}
            },
            {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[
        {"type":"litteral","value":"a"},
        {"type": "neutral", "value":"top"},
        {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
      ]}]
    },
    {
      "request": {
        "rule":"plus_right",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"litteral","value":"a"},
            {"type": "plus",
              "value1":{"type": "neutral", "value":"top"},
              "value2":{"type": "neutral", "value":"one"}
            },
            {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[
        {"type":"litteral","value":"a"},
        {"type": "neutral", "value":"one"},
        {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
      ]}]
    },
    {
      "request": {
        "rule":"promotion",
        "sequent": {
          "hyp": [],
          "cons": [{"type":"ofcourse","value":{"type":"litteral","value":"a"}}]
        },
        "formulaPositions":[0]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[
        {"type":"litteral","value":"a"}
      ]}]
    },
    {
      "request": {
        "rule":"promotion",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"whynot","value":{"type":"litteral","value":"b"}},
            {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[
        {"type":"whynot","value":{"type":"litteral","value":"b"}},
        {"type":"litteral","value":"a"}
      ]}]
    },
    {
      "request": {
        "rule":"weakening",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"whynot","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[0]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[]}]
    },
    {
      "request": {
        "rule":"dereliction",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"whynot","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[0]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[{"type":"litteral","value":"a"}]}]
    },
    {
      "request": {
        "rule":"contraction",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"whynot","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[0]
      },
      "expected_sequent_list_as_json": [{"hyp":[], "cons":[
        {"type":"whynot","value":{"type":"litteral","value":"a"}},
        {"type":"whynot","value":{"type":"litteral","value":"a"}}
      ]}]
    }
  ],
  "call_api_apply_rule_technical_exception": [
    {},
    "",
    "hello",
    {
      "rule": "hello",
      "sequent": {"hyp": [], "cons": [
        {
          "type": "par",
          "value1": {"type": "litteral", "value": "a"},
          "value2": {"type": "litteral", "value": "a"}
        }
      ]
      },
      "formulaPositions":[0]
    },
    {
      "rule": "par",
      "sequent": {"hyp": [], "cons": [
        {
          "type": "par",
          "value1": {"type": "hello", "value": "a"},
          "value2": {"type": "litteral", "value": "a"}
        }
      ]
      },
      "formulaPositions":[0]
    },
    {
      "rule": "par",
      "sequent": {"hyp": [{"type": "litteral", "value": "a"}], "cons": [
        {
          "type": "par",
          "value1": {"type": "litteral", "value": "a"},
          "value2": {"type": "litteral", "value": "a"}
        }
      ]
      },
      "formulaPositions":[0]
    },
    {
      "rule": "par",
      "sequent": {"hyp": [], "cons": [
        {
          "type": "par",
          "value1": {"type": "litteral", "value": "a"},
          "value2": {"type": "litteral", "value": "a"}
        }
      ]
      },
      "formulaPositions":[1]
    },
    {
      "rule": "par",
      "sequent": {"hyp": [], "cons": [
        {
          "type": "par",
          "value1": {"type": "litteral", "value": "a"},
          "value2": {"type": "litteral", "value": "a"}
        }
      ]
      },
      "formulaPositions":[-1]
    },
    {
      "rule":"bottom",
      "sequent": {
        "hyp": [],
        "cons": [
          {"type":"neutral","value":"one"},
          {"type":"neutral","value":"bottom"},
          {"type":"litteral","value":"a"}
        ]
      },
      "formulaPositions":[0]
    },
    {
      "rule":"top",
      "sequent": {
        "hyp": [],
        "cons": [
          {"type":"neutral","value":"top"},
          {"type":"neutral","value":"one"}
        ]
      },
      "formulaPositions":[1]
    },
    {
      "rule": "plus",
      "sequent": {
        "hyp": [],
        "cons": [
          {
            "type": "plus",
            "value1": {"type": "litteral", "value": "a"},
            "value2": {"type": "litteral", "value": "a"}
          }
        ]
      },
      "formulaPositions":[0]
    }
  ],
  "call_api_apply_rule_logic_exception": [
    {
      "request": {
        "rule":"one",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"one"},
            {"type":"neutral","value":"one"}
          ]
        },
        "formulaPositions":[0]
      },
      "expected_error_message": "Can not apply 'one' rule: the sequent must be reduced to the single formula '1'."
    },
    {
      "request": {
        "rule":"axiom",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"one"},
            {"type":"neutral","value":"zero"}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_error_message": "Can not apply 'axiom' rule: the two formulas are not orthogonal."
    },
    {
      "request": {
        "rule":"axiom",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"one"},
            {"type":"neutral","value":"bottom"},
            {"type":"neutral","value":"top"}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_error_message": "Can not apply 'axiom' rule: the sequent must contain exactly two formulas."
    },
    {
      "request": {
        "rule":"zero",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"zero"}
          ]
        },
        "formulaPositions":[0]
      },
      "expected_error_message": "Can not apply 'zero' rule: there is no rule for introducing '0'."
    },
    {
      "request": {
        "rule":"promotion",
        "sequent": {
          "hyp": [],
          "cons": [
            {"type":"neutral","value":"zero"},
            {"type":"ofcourse","value":{"type":"litteral","value":"a"}}
          ]
        },
        "formulaPositions":[1]
      },
      "expected_error_message": "Can not apply 'promotion' rule: the context must contain formulas starting by '?' only."
    }
  ],
  "call_api_is_proof_complete": [
    {
      "sequentAsJson":{"hyp":[],"cons":[
        {"type":"par",
          "value1":{"type":"litteral","value":"A"},
          "value2":{"type":"orthogonal","value":{"type":"litteral","value":"A"}}}
      ]},
      "appliedRule":{
        "rule":"par",
        "formulaPositions":[0],
        "premises":[
          {
            "sequentAsJson":{"hyp":[],"cons":[
              {"type":"litteral","value":"A"},
              {"type":"orthogonal","value":{"type":"litteral","value":"A"}}
            ]},"appliedRule":{"rule":"axiom","formulaPositions":[0],"premises":[]}
          }
        ]
      }
    },
    {
      "sequentAsJson":{"hyp":[],"cons":[
        {"type":"par","value1":{"type":"litteral","value":"A"},"value2":{"type":"orthogonal","value":{"type":"litteral","value":"A"}}},
        {"type":"tensor","value1":{"type":"litteral","value":"A"},"value2":{"type":"orthogonal","value":{"type":"litteral","value":"A"}}}]},
      "appliedRule":{
        "rule":"par",
        "formulaPositions":[0],
        "premises":[
          {
            "sequentAsJson":{"hyp":[],"cons":[
              {"type":"litteral","value":"A"},
              {"type":"orthogonal","value":{"type":"litteral","value":"A"}},
              {"type":"tensor","value1":{"type":"litteral","value":"A"},"value2":{"type":"orthogonal","value":{"type":"litteral","value":"A"}}}]},
            "appliedRule":{
              "rule":"exchange",
              "formulaPositions":[1,2,0],
              "premises":[
                {
                  "sequentAsJson":{"hyp":[],"cons":[
                    {"type":"orthogonal","value":{"type":"litteral","value":"A"}},
                    {"type":"tensor","value1":{"type":"litteral","value":"A"},"value2":{"type":"orthogonal","value":{"type":"litteral","value":"A"}}},
                    {"type":"litteral","value":"A"}]},
                  "appliedRule":{
                    "rule":"tensor",
                    "formulaPositions":[1],
                    "premises":[
                      {
                        "sequentAsJson":{"hyp":[],"cons":[
                          {"type":"orthogonal","value":{"type":"litteral","value":"A"}},
                          {"type":"litteral","value":"A"}]},
                        "appliedRule":{
                          "rule":"axiom","formulaPositions":[1],"premises":[]}},
                      {
                        "sequentAsJson":{"hyp":[],"cons":[
                          {"type":"orthogonal","value":{"type":"litteral","value":"A"}},
                          {"type":"litteral","value":"A"}]},
                        "appliedRule":{
                          "rule":"axiom",
                          "formulaPositions":[1],
                          "premises":[]}}]}}]}}]}
    }
  ],
  "call_api_is_proof_complete_exception": [
    {
      "sequentAsJson":{"hyp":[],"cons":[
        {"type":"litteral","value":"A"},
        {"type":"orthogonal","value":{"type":"litteral","value":"A"}},
        {"type":"tensor","value1":{"type":"litteral","value":"A"},"value2":{"type":"orthogonal","value":{"type":"litteral","value":"A"}}}]},
      "appliedRule":{
        "rule":"exchange",
        "formulaPositions":[1,1,0],
        "premises":[]}
    }
  ]
}