# 1 "lexer.mll"
 
open Parser        (* The type token is defined in parser.mli *)

# 6 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\230\255\231\255\232\255\234\255\237\255\238\255\239\255\
    \241\255\242\255\029\000\000\000\003\000\001\000\000\000\248\255\
    \249\255\250\255\251\255\012\000\028\000\016\000\252\255\000\000\
    \001\000\254\255\255\255\253\255\000\000\000\000\233\255\243\255\
    \016\000\012\000\030\000\245\255\236\255\024\000\018\000\034\000\
    \244\255\020\000\235\255\247\255\246\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\004\000\004\000\255\255\255\255\
    \015\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\025\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\003\000\000\000\000\000\000\000\000\000\007\000\000\000\
    \017\000\016\000\008\000\006\000\022\000\010\000\027\000\013\000\
    \004\000\005\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\011\000\031\000\002\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\031\000\012\000\043\000\009\000\000\000\
    \000\000\018\000\019\000\018\000\018\000\018\000\020\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\021\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\041\000\024\000\037\000\015\000\032\000\
    \036\000\034\000\033\000\035\000\038\000\039\000\028\000\040\000\
    \042\000\000\000\029\000\000\000\030\000\000\000\000\000\000\000\
    \000\000\000\000\031\000\000\000\000\000\006\000\000\000\008\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
    \000\000\000\000\012\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\011\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\010\000\000\000\013\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\019\000\000\000\020\000\000\000\021\000\
    \032\000\033\000\021\000\034\000\037\000\038\000\023\000\039\000\
    \041\000\255\255\023\000\255\255\010\000\255\255\255\255\255\255\
    \255\255\255\255\028\000\255\255\255\255\029\000\255\255\029\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\014\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 5 "lexer.mll"
                             ( token lexbuf )
# 126 "lexer.ml"

  | 1 ->
# 6 "lexer.mll"
                             ( EOL )
# 131 "lexer.ml"

  | 2 ->
# 7 "lexer.mll"
                               ( THESIS )
# 136 "lexer.ml"

  | 3 ->
# 8 "lexer.mll"
                             ( COMMA )
# 141 "lexer.ml"

  | 4 ->
let
# 9 "lexer.mll"
                           l
# 147 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 9 "lexer.mll"
                             ( LITT (String.make 1 l) )
# 151 "lexer.ml"

  | 5 ->
# 10 "lexer.mll"
                             ( LPAREN )
# 156 "lexer.ml"

  | 6 ->
# 11 "lexer.mll"
                             ( RPAREN )
# 161 "lexer.ml"

  | 7 ->
# 12 "lexer.mll"
                              ( NEG )
# 166 "lexer.ml"

  | 8 ->
# 13 "lexer.mll"
                             ( CONJ )
# 171 "lexer.ml"

  | 9 ->
# 14 "lexer.mll"
                             ( DISJ )
# 176 "lexer.ml"

  | 10 ->
# 15 "lexer.mll"
                             ( TRUE )
# 181 "lexer.ml"

  | 11 ->
# 16 "lexer.mll"
                             ( FALSE )
# 186 "lexer.ml"

  | 12 ->
# 17 "lexer.mll"
                               ( IMPL )
# 191 "lexer.ml"

  | 13 ->
# 18 "lexer.mll"
                             ( ORTH )
# 196 "lexer.ml"

  | 14 ->
# 19 "lexer.mll"
                               ( TENSOR )
# 201 "lexer.ml"

  | 15 ->
# 20 "lexer.mll"
                             ( PAR )
# 206 "lexer.ml"

  | 16 ->
# 21 "lexer.mll"
                             ( WITH )
# 211 "lexer.ml"

  | 17 ->
# 22 "lexer.mll"
                               ( PLUS )
# 216 "lexer.ml"

  | 18 ->
# 23 "lexer.mll"
                             ( ONE )
# 221 "lexer.ml"

  | 19 ->
# 24 "lexer.mll"
                             ( TOP )
# 226 "lexer.ml"

  | 20 ->
# 25 "lexer.mll"
                             ( BOTTOM )
# 231 "lexer.ml"

  | 21 ->
# 26 "lexer.mll"
                             ( ZERO )
# 236 "lexer.ml"

  | 22 ->
# 27 "lexer.mll"
                               ( LOLLIPOP )
# 241 "lexer.ml"

  | 23 ->
# 28 "lexer.mll"
                             ( OFCOURSE )
# 246 "lexer.ml"

  | 24 ->
# 29 "lexer.mll"
                             ( WHYNOT )
# 251 "lexer.ml"

  | 25 ->
# 30 "lexer.mll"
                             ( EOL )
# 256 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

